{"ast":null,"code":"import * as React from 'react';\nvar isCheckBoxInput = element => element.type === 'checkbox';\nvar isDateObject = data => data instanceof Date;\nvar isNullOrUndefined = value => value == null;\nconst isObjectType = value => typeof value === 'object';\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\nvar getControllerValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\nvar compact = value => value.filter(Boolean);\nvar isUndefined = val => val === undefined;\nvar get = (obj, path, defaultValue) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n  return undefined;\n};\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\nconst HookFormContext = React.createContext(null);\nconst useFormContext = () => React.useContext(HookFormContext);\nconst FormProvider = props => React.createElement(HookFormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\nvar getProxyFormState = function (formState, _proxyFormState, localProxyFormState) {\n  let isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  function createGetter(prop) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n  const result = {};\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key)\n    });\n  }\n  return result;\n};\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(key => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));\n};\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\nvar shouldSubscribeByName = (name, signalName) => !name || !signalName || convertToArrayPayload(name).some(currentName => currentName && (currentName.startsWith(signalName) || signalName.startsWith(currentName)));\nconst tearDown = _unsubscribe => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\nconst updateSubscriptionProps = _ref => {\n  let {\n    _unsubscribe,\n    props\n  } = _ref;\n  return () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback\n      });\n    }\n  };\n};\nfunction useSubscribe(props) {\n  const _unsubscribe = React.useRef();\n  const _updateSubscription = React.useRef(() => {});\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props\n  });\n  !props.skipEarlySubscription && _updateSubscription.current();\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\nfunction useFormState(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    disabled,\n    name\n  } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  const _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    callback: formState => shouldSubscribeByName(_name.current, formState.name) && shouldRenderFormState(formState, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), formState)),\n    subject: control._subjects.state,\n    skipEarlySubscription: true\n  });\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\nfunction useController(props) {\n  const methods = useFormContext();\n  const {\n    name,\n    control = methods.control,\n    shouldUnregister\n  } = props;\n  const [value, setInputStateValue] = React.useState(get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)));\n  const formState = useFormState({\n    control: control || methods.control,\n    name\n  });\n  const _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: data => (!data.name || _name.current === data.name) && setInputStateValue(get(data.values, _name.current)),\n    skipEarlySubscription: true\n  });\n  const registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value\n  }));\n  const updateMounted = React.useCallback((name, value) => {\n    const field = get(control._fields, name);\n    if (field) {\n      field._f.mount = value;\n    }\n  }, [control]);\n  React.useEffect(() => {\n    updateMounted(name, true);\n    return () => {\n      const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n      if (isNameInFieldArray(control._names.array, name) ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n  return {\n    field: {\n      onChange: event => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n        registerProps.onChange({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref: elm => {\n        const field = get(control._fields, name);\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: message => elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity()\n          };\n        }\n      }\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\nconst Controller = props => props.render(useController(props));\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\nvar isKey = value => /^\\w*$/.test(value);\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\nvar getFocusFieldName = function (name, index) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.` : '';\n};\nvar mapCurrentIds = (values, _fieldIds, keyName) => values.map((value, index) => {\n  const output = _fieldIds.current[index];\n  return Object.assign(Object.assign({}, value), output ? {\n    [keyName]: output[keyName]\n  } : {});\n});\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\nvar mapIds = function () {\n  let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let keyName = arguments.length > 1 ? arguments[1] : undefined;\n  return values.map(value => Object.assign(Object.assign({}, value[keyName] ? {} : {\n    [keyName]: generateId()\n  }), value));\n};\nfunction append(data, value) {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\nvar fillEmptyArray = value => Array.isArray(value) ? value.map(() => undefined) : undefined;\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n  return [];\n};\nvar omitKeys = (fields, keyName) => fields.map(function () {\n  let field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return omit(field, keyName);\n});\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n  return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\nvar updateAt = (fieldValues, index, value) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\nconst useFieldArray = props => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister\n  } = props;\n  const [fields, setFields] = React.useState(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n  useSubscribe({\n    callback: _ref2 => {\n      let {\n        values,\n        name: fieldArrayName\n      } = _ref2;\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n    skipEarlySubscription: true\n  });\n  const updateValues = React.useCallback(updatedFieldArrayValuesWithKey => {\n    const updatedFieldArrayValues = omitKeys(updatedFieldArrayValuesWithKey, keyName);\n    _actioned.current = true;\n    set(control._formValues, name, updatedFieldArrayValues);\n    setFields(updatedFieldArrayValuesWithKey);\n    return updatedFieldArrayValues;\n  }, [control, name, keyName]);\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = append(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(appendValue, keyName));\n    control._updateFieldArray(name, append, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValuesWithKey.length - appendValue.length, options);\n  };\n  const prepend$1 = (value, options) => {\n    const updatedFieldArrayValuesWithKey = prepend(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(convertToArrayPayload(value), keyName));\n    control._updateFieldArray(name, prepend, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n  const remove = index => {\n    const updatedFieldArrayValuesWithKey = removeArrayAt(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index);\n    control._updateFieldArray(name, removeArrayAt, {\n      argA: index\n    }, updateValues(updatedFieldArrayValuesWithKey));\n  };\n  const insert$1 = (index, value, options) => {\n    const updatedFieldArrayValuesWithKey = insert(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index, mapIds(convertToArrayPayload(value), keyName));\n    control._updateFieldArray(name, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n  const swap = (indexA, indexB) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(name, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n  };\n  const move = (from, to) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(name, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n  };\n  const update = (index, value) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    const updatedFieldArrayValues = updateAt(updatedFieldArrayValuesWithKey, index, value);\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(name, updateAt, {\n      argA: index,\n      argB: value\n    }, updateValues(_fieldIds.current), true, false);\n  };\n  const replace = value => {\n    const updatedFieldArrayValuesWithKey = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(name, () => updatedFieldArrayValuesWithKey, {}, updateValues(updatedFieldArrayValuesWithKey), true, false);\n  };\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n    if (_actioned.current) {\n      control._executeSchema([name]).then(result => {\n        const error = get(result.errors, name);\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors\n          });\n        }\n      });\n    }\n    control._subjects.watch.next({\n      name,\n      values: control._formValues\n    });\n    control._names.focus && focusFieldBy(control._fields, key => key.startsWith(control._names.focus));\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control, keyName]),\n    append: React.useCallback(append$1, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert$1, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields\n  };\n};\nvar isFunction = value => typeof value === 'function';\nfunction cloneObject(data) {\n  let copy;\n  const isArray = Array.isArray(data);\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n  return copy;\n}\nfunction createSubscription() {\n  let tearDowns = [];\n  const add = tearDown => {\n    tearDowns.push(tearDown);\n  };\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n    tearDowns = [];\n  };\n  return {\n    add,\n    unsubscribe\n  };\n}\nfunction createSubscriber(observer, subscription) {\n  let closed = false;\n  subscription.add(() => closed = true);\n  const next = value => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n  return {\n    next\n  };\n}\nfunction createSubject() {\n  let _observers = [];\n  const next = value => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n  const subscribe = observer => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n    _observers.push(subscriber);\n    return subscription;\n  };\n  const unsubscribe = () => {\n    _observers = [];\n  };\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe\n  };\n}\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (const key of keys1) {\n    const val1 = object1[key];\n    if (!keys2.includes(key)) {\n      return false;\n    }\n    if (key !== 'ref') {\n      const val2 = object2[key];\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\nvar isBoolean = value => typeof value === 'boolean';\nvar isFileInput = element => element.type === 'file';\nvar isHTMLElement = value => value instanceof HTMLElement;\nvar isMultipleSelect = element => element.type === `select-multiple`;\nvar isRadioInput = element => element.type === 'radio';\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\nvar isString = value => typeof value === 'string';\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\nvar live = ref => isHTMLElement(ref) && document.contains(ref);\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return object;\n}\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n  if (childObject) {\n    delete childObject[key];\n  }\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n    if (k > 0) {\n      previousObjRef = object;\n    }\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n      previousObjRef = objectRef;\n    }\n  }\n  return object;\n}\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n    return options[0].checked && !options[0].disabled ?\n    // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n  return defaultResult;\n};\nvar getFieldValueAs = (value, _ref3) => {\n  let {\n    valueAsNumber,\n    valueAsDate,\n    setValueAs\n  } = _ref3;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\nfunction getFieldValue(_f) {\n  const ref = _f.ref;\n  if (_f.refs ? _f.refs.every(ref => ref.disabled) : ref.disabled) {\n    return;\n  }\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(_ref4 => {\n      let {\n        value\n      } = _ref4;\n      return value;\n    });\n  }\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n  for (const name of fieldsNames) {\n    const field = get(_fields, name);\n    field && set(fields, name, field._f);\n  }\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\nvar hasValidation = options => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\nfunction schemaErrorLookup(errors, _fields, name) {\n  const error = get(errors, name);\n  if (error || isKey(name)) {\n    return {\n      error,\n      name\n    };\n  }\n  const names = name.split('.');\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return {\n        name\n      };\n    }\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError\n      };\n    }\n    names.pop();\n  }\n  return {\n    name\n  };\n}\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n  return target;\n}\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        !isNullOrUndefined(defaultValues) && deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n  return dirtyFields;\n}\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name, [])).length && unset(ref, name);\nvar isMessage = value => isString(value) || React.isValidElement(value);\nvar isRegex = value => value instanceof RegExp;\nfunction getValidateError(result, ref) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef = refs ? refs[0] : ref;\n  const setCustomValidty = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n  const getMinMaxMessage = function (exceedMax, maxLengthMessage, minLengthMessage) {\n    let maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n    let minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidty(validateError.message);\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n  setCustomValidty(true);\n  return error;\n};\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\nconst isWindowUndefined = typeof window === 'undefined';\nfunction createFormControl() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let _options = Object.assign(Object.assign({}, defaultOptions), props);\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  let _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  let delayErrorCallback;\n  let timer = 0;\n  let validateFields = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  const _subjects = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject()\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n  const debounce = (callback, wait) => function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    clearTimeout(timer);\n    timer = window.setTimeout(() => callback(...args), wait);\n  };\n  const isFieldWatched = (name, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || _names.watch.has((name.match(/\\w+/) || [])[0]));\n  const _updateValid = async shouldSkipRender => {\n    let isValid = false;\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuildInValidation(_fields, true);\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid\n        });\n      }\n    }\n    return isValid;\n  };\n  const _updateFieldArray = function (name, method, args) {\n    let values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let shouldSetValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let shouldSetFields = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _stateFlags.action = true;\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid\n    });\n  };\n  const updateErrors = (name, error) => (set(_formState.errors, name, error), _subjects.state.next({\n    errors: _formState.errors\n  }));\n  const updateValidAndValue = (name, shouldSkipSetValueAs, ref) => {\n    const field = get(_fields, name);\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n    }\n    _stateFlags.mount && _updateValid();\n  };\n  const updateTouchAndDirty = function (name, fieldValue, isCurrentTouched) {\n    let shouldRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let isFieldDirty = false;\n    const output = {\n      name\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n  const updateFieldArrayDirty = (name, value) => (set(_formState.dirtyFields, name, setFieldArrayDirtyFields(value, get(_defaultValues, name, []), get(_formState.dirtyFields, name, []))), unsetEmptyArray(_formState.dirtyFields, name));\n  const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n    if (props.delayError && error) {\n      delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n    }\n    if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n        isValid\n      } : {}), {\n        errors: _formState.errors,\n        name\n      });\n      _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n      _subjects.state.next(updatedFormState);\n    }\n    validateFields[name]--;\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false\n      });\n      validateFields = {};\n    }\n  };\n  const _executeSchema = async name => _options.resolver ? await _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation)) : {};\n  const executeSchemaAndUpdateState = async names => {\n    const {\n      errors\n    } = await _executeSchema();\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n    return errors;\n  };\n  const executeBuildInValidation = async function (fields, shouldOnlyCheckValid) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      valid: true\n    };\n    for (const name in fields) {\n      const field = fields[name];\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n        if (fieldReference) {\n          const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n          }\n        }\n        fieldValue && (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\n      }\n    }\n    return context.valid;\n  };\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name);\n      field && (field._f.refs ? field._f.refs.every(ref => !live(ref)) : !live(field._f.ref)) && unregister(name);\n    }\n    _names.unMount = new Set();\n  };\n  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));\n  const _getWatch = (names, defaultValue, isGlobal) => {\n    const fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? {\n      [names]: defaultValue\n    } : defaultValue);\n    if (names) {\n      const result = convertToArrayPayload(names).map(fieldName => (isGlobal && _names.watch.add(fieldName), get(fieldValues, fieldName)));\n      return Array.isArray(names) ? result : result[0];\n    }\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n  const _getFieldArray = name => get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []);\n  const setFieldValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let shouldRender = arguments.length > 3 ? arguments[3] : undefined;\n    const field = get(_fields, name);\n    let fieldValue = value;\n    if (field) {\n      const fieldReference = field._f;\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(selectRef => selectRef.selected = fieldValue.includes(selectRef.value));\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(data => data === checkboxRef.value) : fieldValue === checkboxRef.value) : fieldReference.refs[0].checked = !!fieldValue;\n          } else {\n            fieldReference.refs.forEach(radioRef => radioRef.checked = radioRef.value === fieldValue);\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n        shouldRender && _subjects.control.next({\n          values: _formValues,\n          name\n        });\n      }\n    }\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n    options.shouldValidate && trigger(name);\n  };\n  const setValues = (name, value, options) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n  const setValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    set(_formValues, name, value);\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues\n      });\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        updateFieldArrayDirty(name, value);\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value) ? setValues(name, value, options) : setFieldValue(name, value, options, true);\n    }\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name\n    });\n  };\n  const handleChange = async event => {\n    const target = event.target;\n    let name = target.name;\n    const field = get(_fields, name);\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n      const isWatched = isFieldWatched(name, isBlurEvent);\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n      set(_formValues, name, fieldValue);\n      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n      !isBlurEvent && _subjects.watch.next({\n        name,\n        type: event.type\n      });\n      if (shouldSkipValidation) {\n        return shouldRender && _subjects.state.next(Object.assign({\n          name\n        }, isWatched ? {} : fieldState));\n      }\n      !isBlurEvent && isWatched && _subjects.state.next({});\n      validateFields[name] = validateFields[name] ? +1 : 1;\n      _proxyFormState.isValidating && _subjects.state.next({\n        isValidating: true\n      });\n      if (_options.resolver) {\n        const {\n          errors\n        } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n        const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n        isValid = await _updateValid(true);\n      }\n      field._f.deps && trigger(field._f.deps);\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n  const trigger = async function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name);\n    _subjects.state.next({\n      isValidating: true\n    });\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n      isValid = isEmptyObject(errors);\n      validationResult = name ? !fieldNames.some(name => get(errors, name)) : isValid;\n    } else if (name) {\n      validationResult = (await Promise.all(fieldNames.map(async fieldName => {\n        const field = get(_fields, fieldName);\n        return await executeBuildInValidation(field && field._f ? {\n          [fieldName]: field\n        } : field);\n      }))).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n    _subjects.state.next(Object.assign(Object.assign(Object.assign({}, !isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : {\n      name\n    }), _options.resolver ? {\n      isValid\n    } : {}), {\n      errors: _formState.errors,\n      isValidating: false\n    }));\n    options.shouldFocus && !validationResult && focusFieldBy(_fields, key => get(_formState.errors, key), name ? fieldNames : _names.mount);\n    return validationResult;\n  };\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(_formState.errors, inputName)) : _formState.errors = {};\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true\n    });\n  };\n  const setError = (name, error, options) => {\n    const ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n  const watch = (name, defaultValue) => isFunction(name) ? _subjects.watch.subscribe({\n    next: info => name(_getWatch(undefined, defaultValue), info)\n  }) : _getWatch(name, defaultValue, true);\n  const unregister = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n      }\n    }\n    _subjects.watch.next({});\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n    !options.keepIsValid && _updateValid();\n  };\n  const register = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const field = get(_fields, name);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n    _names.mount.add(name);\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n    field ? isBoolean(options.disabled) && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true);\n    return isWindowUndefined ? {\n      name: name\n    } : Object.assign(Object.assign({\n      name\n    }, isBoolean(options.disabled) ? {\n      disabled: options.disabled\n    } : {}), {\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: ref => {\n        if (ref) {\n          register(name, options);\n          let field = get(_fields, name);\n          const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n          if (fieldRef === field._f.ref || isRadioOrCheckbox && compact(field._f.refs || []).find(option => option === fieldRef)) {\n            return;\n          }\n          field = {\n            _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n              refs: [...compact(field._f.refs || []).filter(live), fieldRef],\n              ref: {\n                type: fieldRef.type,\n                name\n              }\n            }) : Object.assign(Object.assign({}, field._f), {\n              ref: fieldRef\n            })\n          };\n          set(_fields, name, field);\n          (!options || !options.disabled) && updateValidAndValue(name, false, fieldRef);\n        } else {\n          const field = get(_fields, name, {});\n          const shouldUnregister = _options.shouldUnregister || options.shouldUnregister;\n          if (field._f) {\n            field._f.mount = false;\n          }\n          shouldUnregister && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      }\n    });\n  };\n  const handleSubmit = (onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n    let hasNoPromiseError = true;\n    let fieldValues = Object.assign({}, _formValues);\n    _subjects.state.next({\n      isSubmitting: true\n    });\n    try {\n      if (_options.resolver) {\n        const {\n          errors,\n          values\n        } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuildInValidation(_fields);\n      }\n      if (isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(name => get(fieldValues, name))) {\n        _subjects.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(_formState.errors, e));\n        _options.shouldFocusError && focusFieldBy(_fields, key => get(_formState.errors, key), _names.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      _formState.isSubmitted = true;\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors\n      });\n    }\n  };\n  const reset = function (formValues) {\n    let keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n            try {\n              isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneUpdatedValues;\n      _fields = {};\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues\n      });\n      _subjects.watch.next({});\n      _subjects.array.next({\n        values: cloneUpdatedValues\n      });\n    }\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? !deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? Object.entries(formValues).reduce((previous, _ref5) => {\n        let [key, value] = _ref5;\n        return Object.assign(Object.assign({}, previous), {\n          [key]: value !== get(_defaultValues, key)\n        });\n      }, {}) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n  const setFocus = name => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus\n  };\n}\nfunction useForm() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const _formControl = React.useRef();\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState\n    });\n  }\n  const control = _formControl.current.control;\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: formState => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = Object.assign(Object.assign({}, control._formState), formState);\n        updateFormState(Object.assign({}, control._formState));\n      }\n    }\n  });\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n  React.useEffect(() => () => Object.values(control._subjects).forEach(subject => subject.unsubscribe()), [control]);\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\nfunction useWatch(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled\n  } = props || {};\n  const _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: formState => {\n      if (shouldSubscribeByName(_name.current, formState.name)) {\n        control._stateFlags.mount = true;\n        const fieldValues = control._getWatch(_name.current, defaultValue);\n        updateValue(isObject(fieldValues) ? Object.assign({}, fieldValues) : Array.isArray(fieldValues) ? [...fieldValues] : fieldValues);\n      }\n    }\n  });\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue);\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n  return value;\n}\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"names":["isCheckBoxInput","element","type","isDateObject","data","Date","isNullOrUndefined","value","isObjectType","isObject","Array","isArray","getControllerValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","some","current","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","omit","source","copy","Object","assign","HookFormContext","React","createContext","useFormContext","useContext","FormProvider","props","createElement","Provider","children","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","arguments","length","createGetter","prop","defineProperty","isEmptyObject","keys","shouldRenderFormState","formStateData","find","convertToArrayPayload","shouldSubscribeByName","signalName","currentName","startsWith","tearDown","_unsubscribe","unsubscribe","updateSubscriptionProps","_ref","disabled","subject","subscribe","next","callback","useSubscribe","useRef","_updateSubscription","skipEarlySubscription","useEffect","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_subjects","state","useController","shouldUnregister","setInputStateValue","_formValues","_defaultValues","values","registerProps","register","rules","updateMounted","useCallback","field","_fields","_f","mount","_shouldUnregisterField","_options","_names","array","_stateFlags","action","unregister","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","getFocusFieldName","options","shouldFocus","focusName","focusIndex","mapCurrentIds","_fieldIds","keyName","map","output","generateId","d","performance","now","c","r","Math","random","toString","mapIds","append","fillEmptyArray","insert","slice","moveArrayAt","from","to","splice","omitKeys","prepend","removeAtIndexes","indexes","i","temp","removeArrayAt","sort","a","b","swapArrayAt","indexA","indexB","updateAt","fieldValues","useFieldArray","setFields","_getFieldArray","_actioned","add","_ref2","fieldArrayName","updateValues","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","append$1","appendValue","_updateFieldArray","argA","prepend$1","remove","insert$1","argB","swap","move","update","watchAll","watchField","watch","_executeSchema","then","_updateValid","isFunction","cloneObject","Set","createSubscription","tearDowns","push","teardown","createSubscriber","observer","subscription","closed","createSubject","_observers","subscriber","observers","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isBoolean","isFileInput","isHTMLElement","HTMLElement","isMultipleSelect","isRadioInput","isRadioOrCheckboxFunction","isString","isWeb","window","document","live","contains","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","defaultResult","validResult","getCheckboxValue","option","attributes","getFieldValueAs","_ref3","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","getRadioValue","previous","getFieldValue","every","files","selectedOptions","_ref4","getResolverOptions","criteriaMode","shouldUseNativeValidation","hasValidation","schemaErrorLookup","fieldName","join","foundError","pop","deepMerge","targetValue","sourceValue","_a","setDirtyFields","defaultValues","parentNode","parentName","setFieldArrayDirtyFields","skipValidation","isBlurEvent","isSubmitted","reValidateMode","unsetEmptyArray","isMessage","isValidElement","isRegex","RegExp","getValidateError","getValueAndMessage","validationData","validateField","inputValue","inputRef","setCustomValidty","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validateFields","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","_len","args","_key","clearTimeout","setTimeout","isFieldWatched","has","shouldSkipRender","resolver","executeBuildInValidation","method","shouldSetValues","shouldSetFields","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","fieldError","_removeUnmounted","getValues","_getWatch","isGlobal","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","shouldSkipValidation","deps","isWatched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","fieldRef","querySelectorAll","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","_ref5","keepErrors","setFocus","useForm","_formControl","useWatch","updateValue"],"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/omitKeys.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/useFieldArray.ts","../src/utils/isFunction.ts","../src/utils/cloneObject.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/isString.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/schemaErrorLookup.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/logic/skipValidation.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/useForm.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T>(name?: T, signalName?: string) =>\n  !name ||\n  !signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, TearDown } from './utils/createSubject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport { FieldValues, UseFormStateProps, UseFormStateReturn } from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(_name.current, formState.name) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n    skipEarlySubscription: true,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, _name.current)),\n    skipEarlySubscription: true,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n    skipEarlySubscription: true,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      setFields(updatedFieldArrayValuesWithKey);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type Subscription = {\n  add: (tearDown: TearDown) => void;\n  unsubscribe: () => void;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nfunction createSubscription() {\n  let tearDowns: TearDown[] = [];\n\n  const add = (tearDown: TearDown) => {\n    tearDowns.push(tearDown);\n  };\n\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n    tearDowns = [];\n  };\n\n  return {\n    add,\n    unsubscribe,\n  };\n}\n\nfunction createSubscriber<T>(\n  observer: Observer<T>,\n  subscription: Subscription,\n): Observer<T> {\n  let closed = false;\n  subscription.add(() => (closed = true));\n\n  const next = (value: T) => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n\n  return {\n    next,\n  };\n}\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>) => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n    _observers.push(subscriber);\n    return subscription;\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  React.useEffect(\n    () => () =>\n      Object.values(control._subjects).forEach((subject) =>\n        subject.unsubscribe(),\n      ),\n    [control],\n  );\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import * as React from 'react';\n\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (shouldSubscribeByName(_name.current, formState.name)) {\n        control._stateFlags.mount = true;\n        const fieldValues = control._getWatch(\n          _name.current as InternalFieldName,\n          defaultValue as UnpackNestedValue<\n            DeepPartialSkipArrayKey<TFieldValues>\n          >,\n        );\n\n        updateValue(\n          isObject(fieldValues)\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}