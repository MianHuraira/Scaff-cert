{"ast":null,"code":"// ** Checks if an object is empty (returns boolean)\nexport const isObjEmpty = obj => Object.keys(obj).length === 0;\n\n// ** Returns K format from a number\nexport const kFormatter = num => num > 999 ? `${(num / 1000).toFixed(1)}` : num;\n\n// ** Converts HTML to string\nexport const htmlToString = html => html.replace(/<\\/?[^>]+(>|$)/g, '');\n\n// ** Checks if the passed date is today\nconst isToday = date => {\n  const today = new Date();\n  return (/* eslint-disable operator-linebreak */\n    date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear()\n    /* eslint-enable */\n  );\n};\n\n/**\r\n ** Format and return date in Humanize format\r\n ** Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\r\n ** Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\r\n * @param {String} value date to format\r\n * @param {Object} formatting Intl object to format with\r\n */\nexport const formatDate = function (value) {\n  let formatting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric'\n  };\n  if (!value) return value;\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\n};\n\n// ** Returns short month of passed date\nexport const formatDateToMonthShort = function (value) {\n  let toTimeForCurrentDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const date = new Date(value);\n  let formatting = {\n    month: 'short',\n    day: 'numeric'\n  };\n  if (toTimeForCurrentDay && isToday(date)) {\n    formatting = {\n      hour: 'numeric',\n      minute: 'numeric'\n    };\n  }\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\n};\n\n/**\r\n ** Return if user is logged in\r\n ** This is completely up to you and how you want to store the token in your frontend application\r\n *  ? e.g. If you are using cookies to store the application please update this function\r\n */\nexport const isUserLoggedIn = () => localStorage.getItem('userData');\nexport const getUserData = () => JSON.parse(localStorage.getItem('userData'));\n\n/**\r\n ** This function is used for demo purpose route navigation\r\n ** In real app you won't need this function because your app will navigate to same route for each users regardless of ability\r\n ** Please note role field is just for showing purpose it's not used by anything in frontend\r\n ** We are checking role just for ease\r\n * ? NOTE: If you have different pages to navigate based on user ability then this function can be useful. However, you need to update it.\r\n * @param {String} userRole Role of user\r\n */\nexport const getHomeRouteForLoggedInUser = userRole => {\n  if (userRole === 'admin') return '/';\n  if (userRole === 'client') return '/access-control';\n  return '/login';\n};\n\n// ** React Select Theme Colors\nexport const selectThemeColors = theme => ({\n  ...theme,\n  colors: {\n    ...theme.colors,\n    primary25: '#7367f01a',\n    // for option hover bg-color\n    primary: '#7367f0',\n    // for selected option bg-color\n    neutral10: '#7367f0',\n    // for tags bg-color\n    neutral20: '#ededed',\n    // for input border-color\n    neutral30: '#ededed' // for input hover border-color\n  }\n});","map":{"version":3,"names":["isObjEmpty","obj","Object","keys","length","kFormatter","num","toFixed","htmlToString","html","replace","isToday","date","today","Date","getDate","getMonth","getFullYear","formatDate","value","formatting","arguments","undefined","month","day","year","Intl","DateTimeFormat","format","formatDateToMonthShort","toTimeForCurrentDay","hour","minute","isUserLoggedIn","localStorage","getItem","getUserData","JSON","parse","getHomeRouteForLoggedInUser","userRole","selectThemeColors","theme","colors","primary25","primary","neutral10","neutral20","neutral30"],"sources":["D:/Utecho/Scaff-cert/src/utility/Utils.js"],"sourcesContent":["// ** Checks if an object is empty (returns boolean)\r\nexport const isObjEmpty = (obj) => Object.keys(obj).length === 0\r\n\r\n// ** Returns K format from a number\r\nexport const kFormatter = (num) =>\r\n  num > 999 ? `${(num / 1000).toFixed(1)}` : num\r\n\r\n// ** Converts HTML to string\r\nexport const htmlToString = (html) => html.replace(/<\\/?[^>]+(>|$)/g, '')\r\n\r\n// ** Checks if the passed date is today\r\nconst isToday = (date) => {\r\n  const today = new Date()\r\n  return (\r\n    /* eslint-disable operator-linebreak */\r\n    date.getDate() === today.getDate() &&\r\n    date.getMonth() === today.getMonth() &&\r\n    date.getFullYear() === today.getFullYear()\r\n    /* eslint-enable */\r\n  )\r\n}\r\n\r\n/**\r\n ** Format and return date in Humanize format\r\n ** Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\r\n ** Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\r\n * @param {String} value date to format\r\n * @param {Object} formatting Intl object to format with\r\n */\r\nexport const formatDate = (\r\n  value,\r\n  formatting = { month: 'short', day: 'numeric', year: 'numeric' }\r\n) => {\r\n  if (!value) return value\r\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\r\n}\r\n\r\n// ** Returns short month of passed date\r\nexport const formatDateToMonthShort = (value, toTimeForCurrentDay = true) => {\r\n  const date = new Date(value)\r\n  let formatting = { month: 'short', day: 'numeric' }\r\n\r\n  if (toTimeForCurrentDay && isToday(date)) {\r\n    formatting = { hour: 'numeric', minute: 'numeric' }\r\n  }\r\n\r\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\r\n}\r\n\r\n/**\r\n ** Return if user is logged in\r\n ** This is completely up to you and how you want to store the token in your frontend application\r\n *  ? e.g. If you are using cookies to store the application please update this function\r\n */\r\nexport const isUserLoggedIn = () => localStorage.getItem('userData')\r\nexport const getUserData = () => JSON.parse(localStorage.getItem('userData'))\r\n\r\n/**\r\n ** This function is used for demo purpose route navigation\r\n ** In real app you won't need this function because your app will navigate to same route for each users regardless of ability\r\n ** Please note role field is just for showing purpose it's not used by anything in frontend\r\n ** We are checking role just for ease\r\n * ? NOTE: If you have different pages to navigate based on user ability then this function can be useful. However, you need to update it.\r\n * @param {String} userRole Role of user\r\n */\r\nexport const getHomeRouteForLoggedInUser = (userRole) => {\r\n  if (userRole === 'admin') return '/'\r\n  if (userRole === 'client') return '/access-control'\r\n  return '/login'\r\n}\r\n\r\n// ** React Select Theme Colors\r\nexport const selectThemeColors = (theme) => ({\r\n  ...theme,\r\n  colors: {\r\n    ...theme.colors,\r\n    primary25: '#7367f01a', // for option hover bg-color\r\n    primary: '#7367f0', // for selected option bg-color\r\n    neutral10: '#7367f0', // for tags bg-color\r\n    neutral20: '#ededed', // for input border-color\r\n    neutral30: '#ededed' // for input hover border-color\r\n  }\r\n})\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAIC,GAAG,IAAKC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACG,MAAM,KAAK,CAAC;;AAEhE;AACA,OAAO,MAAMC,UAAU,GAAIC,GAAG,IAC5BA,GAAG,GAAG,GAAG,GAAI,GAAE,CAACA,GAAG,GAAG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAE,EAAC,GAAGD,GAAG;;AAEhD;AACA,OAAO,MAAME,YAAY,GAAIC,IAAI,IAAKA,IAAI,CAACC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;;AAEzE;AACA,MAAMC,OAAO,GAAIC,IAAI,IAAK;EACxB,MAAMC,KAAK,GAAG,IAAIC,IAAI,EAAE;EACxB,OACE;IACAF,IAAI,CAACG,OAAO,EAAE,KAAKF,KAAK,CAACE,OAAO,EAAE,IAClCH,IAAI,CAACI,QAAQ,EAAE,KAAKH,KAAK,CAACG,QAAQ,EAAE,IACpCJ,IAAI,CAACK,WAAW,EAAE,KAAKJ,KAAK,CAACI,WAAW;IACxC;EAAA;AAEJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,SAAAA,CACxBC,KAAK,EAEF;EAAA,IADHC,UAAU,GAAAC,SAAA,CAAAjB,MAAA,QAAAiB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG;IAAEE,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAU,CAAC;EAEhE,IAAI,CAACN,KAAK,EAAE,OAAOA,KAAK;EACxB,OAAO,IAAIO,IAAI,CAACC,cAAc,CAAC,OAAO,EAAEP,UAAU,CAAC,CAACQ,MAAM,CAAC,IAAId,IAAI,CAACK,KAAK,CAAC,CAAC;AAC7E,CAAC;;AAED;AACA,OAAO,MAAMU,sBAAsB,GAAG,SAAAA,CAACV,KAAK,EAAiC;EAAA,IAA/BW,mBAAmB,GAAAT,SAAA,CAAAjB,MAAA,QAAAiB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI;EACtE,MAAMT,IAAI,GAAG,IAAIE,IAAI,CAACK,KAAK,CAAC;EAC5B,IAAIC,UAAU,GAAG;IAAEG,KAAK,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAU,CAAC;EAEnD,IAAIM,mBAAmB,IAAInB,OAAO,CAACC,IAAI,CAAC,EAAE;IACxCQ,UAAU,GAAG;MAAEW,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE;IAAU,CAAC;EACrD;EAEA,OAAO,IAAIN,IAAI,CAACC,cAAc,CAAC,OAAO,EAAEP,UAAU,CAAC,CAACQ,MAAM,CAAC,IAAId,IAAI,CAACK,KAAK,CAAC,CAAC;AAC7E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMc,cAAc,GAAGA,CAAA,KAAMC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;AACpE,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAMC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,2BAA2B,GAAIC,QAAQ,IAAK;EACvD,IAAIA,QAAQ,KAAK,OAAO,EAAE,OAAO,GAAG;EACpC,IAAIA,QAAQ,KAAK,QAAQ,EAAE,OAAO,iBAAiB;EACnD,OAAO,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAIC,KAAK,KAAM;EAC3C,GAAGA,KAAK;EACRC,MAAM,EAAE;IACN,GAAGD,KAAK,CAACC,MAAM;IACfC,SAAS,EAAE,WAAW;IAAE;IACxBC,OAAO,EAAE,SAAS;IAAE;IACpBC,SAAS,EAAE,SAAS;IAAE;IACtBC,SAAS,EAAE,SAAS;IAAE;IACtBC,SAAS,EAAE,SAAS,CAAC;EACvB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}